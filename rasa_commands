Train NLU 

docker run \
  -v $(pwd)/vol_chatbot_data/rasa/100/data:/app/data \
  -v $(pwd)/vol_chatbot_data/rasa/100/models/nlu:/app/models \
  -v $(pwd)/vol_chatbot_data/rasa/100/config:/app/config \
  rasa/rasa_nlu:latest-tensorflow \
  run \
    python -m rasa_nlu.train \
    -c config/nlu_config.yml \
    -d data/demo_nlu.json \
    -o models \
    --project current

train core 

docker run \
  -v $(pwd)/vol_chatbot_data/rasa/100/data:/app/data \
  -v $(pwd)/vol_chatbot_data/rasa/100/models/core:/app/models \
  rasa/rasa_core:latest \
  train \
    --domain data/demo_domain.yml \
    --stories data/demo_stories.md \
    --out models



interactive training 

sudo docker run -it -v $(pwd):/app/project -v $(pwd)/models/rasa_core:/app/models rasa/rasa_core:latest run python -m rasa_core.train interactive -o project/models/rasa_core/dialogue -s project/data/demo_stories.md -d project/data/demo_domain.yml --endpoints /app/project/config/endpoints_interactive.yml -u current/current


Clear Redies cache 
docker exec -it container-name redis-cli FLUSHALL


___________________________________________________________________________________________________________________________________

Rasa End points Listing.

Rasa NLU 

Parse - 

curl -XPOST localhost:5000/parse -d '{"q":"hello there", "project": "current"}'

POST /parse
POST /train
POST /evaluate
GET /status
GET /version
GET /config
DELETE /models


RASA Core 

Upload a trained model 
curl -k -F "model=@models/mobile/mobile_bot.zip" http://your_core_server_url/model



Docker Strategy 

Container 1
   PROD RASA NLU 
	Training and serving for NLU 

Container 2
   PROD RASA Core 
	Serving , and uploading trained models

Container 3 
   PROD RASA Actions Server
	Host all Custom actions API 

Container 4 
   PROD RASA Redis Container  

Container 5
   Trainer Backend
	Train a core model 
	Train a nlu model 
	Evaluate Core AND  NLU model 
	Upload Core and  NLU Model to Main containers  -- Upload would only be done for the Core model , and for NLU , training Data and config would be passed and model would be trained on Prod Container
	Interactive training HTTP API.
	Create Actions
	Deploy actions
	Project management + Data API's with Mongo DB 

Container 6 
   Test Actions Server 
	Deploy Test Actions and this endpoint would be exposed for Training backend

Container 7
    MongoDB Datastore 
	Store Training data 
