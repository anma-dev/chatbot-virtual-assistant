import { h } from "@stencil/core";
import { uuidv4, wait } from '../../utils/utils.js';
import '@assister/chat/';
function mapDuration(gap) {
    return {
        'none': 0,
        'short': 500,
        'long': 1000
    }[gap];
}
let previousMessageSent = Promise.resolve();
export class RasaBot {
    constructor() {
        this.conversation = uuidv4();
        this.header = 'Assistant';
        this.gap = 'long';
    }
    handleIncomingMessage(event) {
        const chatMessageElement = event.detail.element;
        fetch(`${this.server}/conversations/${this.conversation}/messages`, {
            method: 'POST',
            body: JSON.stringify({ text: event.detail.text, sender: 'user' }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(() => chatMessageElement.state = 'delivered')
            .then(() => this.predictUntilListen())
            .then(wait(mapDuration(this.gap)))
            .then(() => chatMessageElement.state = 'read');
    }
    predictUntilListen(execution) {
        if (execution && execution.messages && execution.messages.length == 0) {
            return;
        }
        else if (execution) {
            execution.messages.map(message => {
                previousMessageSent = previousMessageSent
                    .then(wait(mapDuration(this.gap)))
                    .then(() => {
                    if (message.text) {
                        this.pane.addIncomingMessage(message.text);
                    }
                    if (message.image) {
                        this.pane.addCard({ image: message.image });
                    }
                });
            });
        }
        fetch(`${this.server}/conversations/${this.conversation}/predict`, { method: 'POST' })
            .then(result => result.json())
            .then(response => response.scores[0].action)
            .then(action => fetch(`${this.server}/conversations/${this.conversation}/execute`, {
            method: 'POST',
            body: JSON.stringify({ name: action }),
            headers: {
                'Content-Type': 'application/json'
            }
        }))
            .then(result => result.json())
            .then(execution => this.predictUntilListen(execution));
    }
    componentDidLoad() {
        this.predictUntilListen();
    }
    render() {
        return (h("fab-app", { ref: element => this.fab = element },
            h("chat-pane", { ref: element => this.pane = element, onIncoming: event => this.handleIncomingMessage(event) },
                h("ion-toolbar", { slot: "header", class: "toolbar" },
                    h("ion-title", null, this.header),
                    h("ion-buttons", { slot: "primary" },
                        h("ion-button", { onClick: () => this.fab.close() },
                            h("ion-icon", { slot: "icon-only", name: "close" })))))));
    }
    static get is() { return "rasa-bot"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["rasa-bot.css"]
    }; }
    static get styleUrls() { return {
        "$": ["rasa-bot.css"]
    }; }
    static get properties() { return {
        "server": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Rasa server address"
            },
            "attribute": "server",
            "reflect": true
        },
        "conversation": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "conversation",
            "reflect": true,
            "defaultValue": "uuidv4()"
        },
        "header": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "header",
            "reflect": true,
            "defaultValue": "'Assistant'"
        },
        "gap": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'none' | 'short' | 'long'",
                "resolved": "\"long\" | \"none\" | \"short\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "gap",
            "reflect": true,
            "defaultValue": "'long'"
        }
    }; }
}
