import { h } from "@stencil/core";
export class Conversation {
    async scrollToBottom() {
        let slot = this.list.querySelector('*');
        let rootSlot = false;
        while (!rootSlot) {
            const children = slot.assignedElements();
            if (children[0].tagName === 'SLOT') {
                slot = children[0];
            }
            else {
                rootSlot = true;
            }
        }
        const children = slot.assignedElements();
        let height = 0;
        for (let i = 0; i < children.length; i++) {
            height += children[i].clientHeight;
        }
        return this.content.scrollToPoint(0, height, 800);
    }
    render() {
        return (h("ion-content", { class: "content", ref: element => this.content = element },
            h("ion-list", { ref: element => this.list = element },
                h("slot", null))));
    }
    static get is() { return "chat-conversation"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["conversation.css"]
    }; }
    static get styleUrls() { return {
        "$": ["conversation.css"]
    }; }
    static get methods() { return {
        "scrollToBottom": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "HTMLSlotElement": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
}
