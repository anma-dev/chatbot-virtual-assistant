import { h } from "@stencil/core";
function createElementsFromText(text) {
    return text.split('\n').map(line => {
        if (line === '') {
            return document.createElement('br');
        }
        const pElement = document.createElement('p');
        pElement.appendChild(document.createTextNode(line));
        return pElement;
    });
}
export class Pane {
    constructor() {
        this.mapInputTextToHtmlElements = createElementsFromText;
        this.triangle = 'bottom';
    }
    addMessage(direction, text) {
        const message = document.createElement('chat-message');
        message.state = direction === 'outgoing' ? 'pending' : 'none';
        message.direction = direction;
        message.triangle = this.triangle;
        message.footer = new Date().toLocaleString('en-US', {
            hour: 'numeric', minute: 'numeric', hour12: true
        });
        this.mapInputTextToHtmlElements(text)
            .map(element => message.appendChild(element));
        this.pane.appendChild(message);
        this.conversation.scrollToBottom();
        return message;
    }
    async addOutgoingMessage(text) {
        return this.addMessage('outgoing', text);
    }
    async addIncomingMessage(text) {
        return this.addMessage('incoming', text);
    }
    async addCard({ text, image }) {
        const card = document.createElement('ion-card');
        card.setAttribute('style', 'background: white;');
        if (image) {
            const imgElement = document.createElement('img');
            imgElement.src = image;
            card.appendChild(imgElement);
        }
        if (text) {
            const contentElement = document.createElement('ion-card-content');
            this.mapInputTextToHtmlElements(text)
                .map(element => contentElement.appendChild(element));
            card.appendChild(contentElement);
        }
        this.pane.appendChild(card);
        this.conversation.scrollToBottom();
        return card;
    }
    render() {
        return [
            h("ion-header", { class: "header" },
                h("slot", { name: "header" })),
            h("chat-conversation", { ref: element => this.conversation = element },
                h("slot", null)),
            h("ion-footer", { class: "footer" },
                h("chat-input", { onSend: event => this.addOutgoingMessage(event.detail.value)
                        .then(message => this.incoming.emit({
                        element: message,
                        text: event.detail.value
                    })) }))
        ];
    }
    static get is() { return "chat-pane"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pane.css"]
    }; }
    static get styleUrls() { return {
        "$": ["pane.css"]
    }; }
    static get properties() { return {
        "mapInputTextToHtmlElements": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(text: string) => HTMLElement[]",
                "resolved": "(text: string) => HTMLElement[]",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "createElementsFromText"
        },
        "triangle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "MessageTriangle",
                "resolved": "\"bottom\" | \"none\" | \"top\"",
                "references": {
                    "MessageTriangle": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "triangle",
            "reflect": false,
            "defaultValue": "'bottom'"
        }
    }; }
    static get events() { return [{
            "method": "incoming",
            "name": "incoming",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "IncomingEventDetail",
                "resolved": "IncomingEventDetail",
                "references": {
                    "IncomingEventDetail": {
                        "location": "import",
                        "path": "../../interfaces"
                    }
                }
            }
        }]; }
    static get methods() { return {
        "addOutgoingMessage": {
            "complexType": {
                "signature": "(text: string) => Promise<HTMLElement>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "HTMLElement": {
                        "location": "global"
                    }
                },
                "return": "Promise<HTMLElement>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "addIncomingMessage": {
            "complexType": {
                "signature": "(text: string) => Promise<HTMLElement>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "HTMLElement": {
                        "location": "global"
                    }
                },
                "return": "Promise<HTMLElement>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "addCard": {
            "complexType": {
                "signature": "({ text, image }: { text?: string; image?: string; }) => Promise<HTMLElement>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "HTMLElement": {
                        "location": "global"
                    }
                },
                "return": "Promise<HTMLElement>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "pane"; }
}
